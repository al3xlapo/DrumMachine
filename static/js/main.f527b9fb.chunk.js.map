{"version":3,"sources":["clips/Hihat.wav","clips/Kick.wav","clips/Snare.wav","clips/Clap.wav","clips/Crash.wav","clips/Open-Hat.wav","clips/808.wav","clips/Perc.wav","clips/Perc2.wav","logo.svg","components/drumpad/DrumPad.js","components/display/Display.js","components/wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumPad","props","id","this","audioClip","className","onClick","play","keyPad","preload","src","url","type","React","Component","Display","pad","sounds","name","source","Kick","keyCode","Hihat","Snare","Clap","Crash","OpenHat","Bass","Perc","Perc2","padStyleActive","textDecoration","display","cursor","borderRadius","color","backgroundColor","border","boxShadow","transform","padStyle","Wrapper","state","padName","handleKeyDown","bind","playAudio","stylePad","document","addEventListener","removeEventListener","event","i","length","getElementById","click","currentTime","setState","setTimeout","style","drumpads","map","obj","index","array","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f527b9fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Hihat.a7941fdf.wav\";","module.exports = __webpack_public_path__ + \"static/media/Kick.528d5088.wav\";","module.exports = __webpack_public_path__ + \"static/media/Snare.79aba21f.wav\";","module.exports = __webpack_public_path__ + \"static/media/Clap.9ece8ab8.wav\";","module.exports = __webpack_public_path__ + \"static/media/Crash.f8ab9810.wav\";","module.exports = __webpack_public_path__ + \"static/media/Open-Hat.01638a64.wav\";","module.exports = __webpack_public_path__ + \"static/media/808.687c5c4e.wav\";","module.exports = __webpack_public_path__ + \"static/media/Perc.cff7c462.wav\";","module.exports = __webpack_public_path__ + \"static/media/Perc2.143d1996.wav\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './DrumPad.css';\r\n\r\nclass DrumPad extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n  \treturn(\r\n\r\n    \t<a id={this.props.audioClip} className='drum-pad' onClick={this.props.play}>\r\n    \t\t<p className='keyPad'><b>{this.props.keyPad}</b></p>\r\n        <audio id={this.props.keyPad} className=\"clip\" preload=\"auto\" src= {this.props.url} type=\"audio/wav\">No support</audio>\r\n    \t</a>\r\n    );\r\n  }\r\n};\r\n\r\nexport default DrumPad;","import React from 'react';\r\nimport './Display.css';\r\n\r\nclass Display extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  \r\n  render(){\r\n  \treturn(\r\n    \t<p id='display'><b>{this.props.pad}</b></p>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Display;","import React from 'react'\r\nimport './Wrapper.css';\r\n\r\nimport DrumPad from '../drumpad/DrumPad.js'\r\nimport Display from '../display/Display.js'\r\n\r\nimport Hihat from '../../clips/Hihat.wav'\r\nimport Kick from '../../clips/Kick.wav'\r\nimport Snare from '../../clips/Snare.wav'\r\nimport Clap from '../../clips/Clap.wav'\r\nimport Crash from '../../clips/Crash.wav'\r\nimport OpenHat from '../../clips/Open-Hat.wav'\r\nimport Bass from '../../clips/808.wav'\r\nimport Perc from '../../clips/Perc.wav'\r\nimport Perc2 from '../../clips/Perc2.wav'\r\n\r\nconst sounds = [\r\n      {\r\n        name: \"Kick\",\r\n        source: Kick,\r\n        keyCode: 81,\r\n        keyPad: \"Q\",\r\n      }, \r\n      {\r\n        name: \"Hihat\",\r\n        source: Hihat,\r\n        keyCode: 87,\r\n        keyPad: \"W\",\r\n      },\r\n      {\r\n        name: \"Snare\",\r\n        source: Snare,\r\n        keyCode: 69,\r\n        keyPad: \"E\",\r\n      },\r\n      {\r\n        name: \"Clap\",\r\n        source: Clap,\r\n        keyCode: 65,\r\n        keyPad: \"A\",\r\n      },\r\n      {\r\n        name: \"Crash\",\r\n        source: Crash,\r\n        keyCode: 83,\r\n        keyPad: \"S\",\r\n      },\r\n      {\r\n        name: \"Open-Hat\",\r\n        source: OpenHat,\r\n        keyCode: 68,\r\n        keyPad: \"D\",\r\n      }, \r\n      {\r\n        name: \"808\",\r\n        source: Bass,\r\n        keyCode: 90,\r\n        keyPad: \"Z\",\r\n      },\r\n      {\r\n        name: \"Perc\",\r\n        source: Perc,\r\n        keyCode: 88,\r\n        keyPad: \"X\",\r\n      },\r\n      {\r\n        name: \"Perc2\",\r\n        source: Perc2,\r\n        keyCode: 67,\r\n        keyPad: \"C\",\r\n      }\r\n];\r\n\r\nconst padStyleActive = {\r\n\r\n  textDecoration:'none',\r\n  display:'flex',\r\n  cursor:'pointer',\r\n  borderRadius: '5px',\r\n  \r\n  color:'white',\r\n  backgroundColor:'black',\r\n  border:'none',\r\n  boxShadow: 'black 0px 3px',\r\n  transform: 'translateY(2px)'\r\n\r\n};\r\n\r\nconst padStyle = {\r\n\r\n  textDecoration:'none',\r\n  display:'flex',\r\n  cursor:'pointer',\r\n  borderRadius: '5px',\r\n  \r\n  color:'black',\r\n  backgroundColor:'white',\r\n  border:'2px solid black',\r\n  boxShadow: 'black 3px 3px 5px',\r\n  transform: 'translateY(-2px)'\r\n  \r\n};\r\n\r\nclass Wrapper extends React.Component{\r\n\t\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n       padName : ''\r\n    }\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.stylePad = this.stylePad.bind(this);\r\n  }\r\n  \r\n  componentDidMount(){\r\n    document.addEventListener('keydown', this.handleKeyDown);  \r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener('keydown', this.handleKeyDown); \r\n  }\r\n\r\n  handleKeyDown(event){\r\n    for(var i=0; i<sounds.length; i++){\r\n      if(sounds[i].keyCode == event.keyCode){\r\n        document.getElementById(sounds[i].name).click();\r\n      }\r\n    }\r\n  }\r\n\r\n  playAudio(keyPad, name){\r\n    document.getElementById(keyPad).currentTime = 0;\r\n    document.getElementById(keyPad).play();\r\n    this.setState(\r\n      {padName: name}\r\n    );\r\n    this.stylePad(name, padStyleActive);\r\n    setTimeout( () => this.stylePad(name, padStyle), 100 );\r\n  }\r\n\r\n  stylePad(name, padStyle){\r\n    var pad = document.getElementById(name);\r\n    pad.style.color = padStyle.color;\r\n    pad.style.backgroundColor = padStyle.backgroundColor;\r\n    pad.style.border = padStyle.border;\r\n    pad.style.boxShadow = padStyle.boxShadow;\r\n    pad.style.transform = padStyle.transform;\r\n  }\r\n\r\n  render(){\r\n      \r\n        let drumpads = sounds.map((obj, index, array) => {\r\n          return (\r\n            <DrumPad\r\n              audioClip = {array[index].name}\r\n              url = {array[index].source}\r\n              keyPad = {array[index].keyPad} \r\n              keyCode = {array[index].keyCode}\r\n              play = { () => this.playAudio(array[index].keyPad, array[index].name) }\r\n            />\r\n          );\r\n        });\r\n\r\n        return(\r\n          <div id=\"drum-machine\">\r\n            <div id='pads'>\r\n              {drumpads}\r\n            </div>\r\n            <div id=\"info\">\r\n              <Display pad = {this.state.padName} />\r\n              <p id=\"model\"><b>trapped ØØ<br/>- トラップ -</b></p>\r\n            </div>\r\n          </div>\r\n        );\r\n  }\r\n};\r\n\r\nexport default Wrapper;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from './components/wrapper/Wrapper.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}